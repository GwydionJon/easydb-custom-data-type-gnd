// Generated by CoffeeScript 1.10.0
var CustomDataTypeGND,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CustomDataTypeGND = (function(superClass) {
  var entityfacts_Panel, entityfacts_xhr, gndResultName, gndResultURI, gnd_xhr, suggest_Menu;

  extend(CustomDataTypeGND, superClass);

  function CustomDataTypeGND() {
    return CustomDataTypeGND.__super__.constructor.apply(this, arguments);
  }

  gnd_xhr = void 0;

  entityfacts_xhr = void 0;

  suggest_Menu = new Menu;

  entityfacts_Panel = new Pane;

  gndResultURI = '';

  gndResultName = '';

  CustomDataTypeGND.prototype.getCustomDataTypeName = function() {
    return "custom:base.custom-data-type-gnd.gnd";
  };

  CustomDataTypeGND.prototype.getCustomDataTypeNameLocalized = function() {
    return $$("custom.data.type.gnd.name");
  };

  CustomDataTypeGND.prototype.renderEditorInput = function(data, top_level_data, opts) {
    var cdata;
    if (!data[this.name()]) {
      cdata = {
        gndResultName: '',
        gndResultURI: ''
      };
      data[this.name()] = cdata;
    } else {
      cdata = data[this.name()];
      gndResultName = cdata.gndResultName;
      gndResultURI = cdata.gndResultURI;
    }
    return this.__renderEditorInputPopover(cdata);
  };

  CustomDataTypeGND.prototype.__renderEditorInputPopover = function(cdata) {
    this.__layout = new HorizontalLayout({
      left: {},
      right: {
        content: {
          loca_key: "custom.data.type.gnd.edit.button",
          onClick: (function(_this) {
            return function(ev, btn) {
              return _this.showEditPopover(btn, cdata);
            };
          })(this)
        }
      }
    });
    this.__updateGNDResult(cdata);
    return this.__layout;
  };

  CustomDataTypeGND.prototype.__updateGNDResult = function(cdata) {
    var btn;
    btn = this.__renderButtonByData(cdata);
    return this.__layout.replace(btn, "left");
  };

  CustomDataTypeGND.prototype.__getInfoFromEntityFacts = function(uri, tooltip) {
    var gndID;
    gndID = uri;
    gndID = gndID.split("/");
    gndID = gndID.pop();
    if (entityfacts_xhr !== void 0) {
      entityfacts_xhr.abort();
    }
    entityfacts_xhr = new CUI.XHR({
      url: 'http://hub.culturegraph.org/entityfacts/' + gndID
    });
    entityfacts_xhr.start().done(function(data, status, statusText) {
      var biographicalOrHistoricalInformation, dateOfBirth, dateOfDeath, dateOfEstablishment, depiction, hierarchicallySuperiorOrganisation, htmlContent, i, j, k, l, len, len1, len2, len3, organisation, organisations, place, placeOfBirth, placeOfBusiness, placeOfDeath, places, profession, professionOrOccupation, professions, t, topic, topics, variantName, variantNames;
      htmlContent = '<span style="font-weight: bold">Informationen über den Eintrag</span>';
      htmlContent += '<table style="border-spacing: 10px; border-collapse: separate;">';
      console.log(data);
      htmlContent += "<tr><td>Name:</td><td>" + data.preferredName + "</td></tr>";
      depiction = data.depiction;
      if (depiction) {
        if (depiction.thumbnail) {
          htmlContent += '<tr><td>Abbildung:</td><td><img src="' + depiction.thumbnail['@id'] + '" style="border: 0; max.width:120px; max-height:150px;" /></td></tr>';
        }
      }
      dateOfBirth = data.dateOfBirth;
      dateOfDeath = data.dateOfDeath;
      if (dateOfBirth || dateOfDeath) {
        htmlContent += "<tr><td>Lebensdaten:</td><td>";
        if (dateOfBirth && dateOfDeath) {
          htmlContent += dateOfBirth + " bis " + dateOfDeath;
        } else if (dateOfBirth && !dateOfDeath) {
          htmlContent += dateOfBirth + " bis unbekannt";
        } else if (!dateOfBirth && dateOfDeath) {
          htmlContent += "unbekannt bis " + dateOfDeath;
        }
        htmlContent += "</td></tr>";
      }
      dateOfEstablishment = data.dateOfEstablishment;
      if (dateOfEstablishment) {
        htmlContent += "<tr><td>Gründung:</td><td>" + dateOfEstablishment[0] + "</td></tr>";
      }
      placeOfBusiness = data.placeOfBusiness;
      places = [];
      if (placeOfBusiness) {
        if (placeOfBusiness.length > 0) {
          for (i = 0, len = placeOfBusiness.length; i < len; i++) {
            place = placeOfBusiness[i];
            places.push(place.preferredName);
          }
          htmlContent += "<tr><td>Niederlassung(en):</td><td>" + places.join("<br />") + "</td></tr>";
        }
      }
      hierarchicallySuperiorOrganisation = data.hierarchicallySuperiorOrganisation;
      organisations = [];
      if (hierarchicallySuperiorOrganisation) {
        if (hierarchicallySuperiorOrganisation.length > 0) {
          for (j = 0, len1 = hierarchicallySuperiorOrganisation.length; j < len1; j++) {
            organisation = hierarchicallySuperiorOrganisation[j];
            organisations.push(organisation.preferredName);
          }
          htmlContent += "<tr><td>Übergeordnete Körperschaft(en):</td><td>" + organisations.join("<br />") + "</td></tr>";
        }
      }
      placeOfBirth = data.placeOfBirth;
      if (placeOfBirth) {
        htmlContent += "<tr><td>Geburtsort:</td><td>" + placeOfBirth[0].preferredName + "</td></tr>";
      }
      placeOfDeath = data.placeOfDeath;
      if (placeOfDeath) {
        htmlContent += "<tr><td>Sterbeort:</td><td>" + placeOfDeath[0].preferredName + "</td></tr>";
      }
      professionOrOccupation = data.professionOrOccupation;
      professions = [];
      if (professionOrOccupation) {
        if (professionOrOccupation.length > 0) {
          for (k = 0, len2 = professionOrOccupation.length; k < len2; k++) {
            profession = professionOrOccupation[k];
            professions.push(profession.preferredName);
          }
          htmlContent += "<tr><td>Beruf(e):</td><td>" + professions.join("<br />") + "</td></tr>";
        }
      }
      biographicalOrHistoricalInformation = data.biographicalOrHistoricalInformation;
      if (biographicalOrHistoricalInformation) {
        htmlContent += "<tr><td>Biographie:</td><td>" + biographicalOrHistoricalInformation + "</td></tr>";
      }
      topic = data.topic;
      topics = [];
      if (topic) {
        if (topic.length > 0) {
          for (l = 0, len3 = topic.length; l < len3; l++) {
            t = topic[l];
            topics.push(t.preferredName);
          }
          htmlContent += "<tr><td>Themen:</td><td>" + topics.join("<br />") + "</td></tr>";
        }
      }
      variantName = data.variantName;
      if (variantName) {
        if (variantName.length > 0) {
          variantNames = variantName.join("<br />");
          htmlContent += "<tr><td>Synonyme:</td><td>" + variantNames + "</td></tr>";
        }
      }
      htmlContent += "</table>";
      tooltip.getPane().replace(htmlContent, "center");
      return tooltip.autoSize();
    }).fail(function(data, status, statusText) {
      return CUI.debug('FAIL', entityfacts_xhr.getXHR(), entityfacts_xhr.getResponseHeaders());
    });
  };

  CustomDataTypeGND.prototype.__updateSuggestionsMenu = function(cdata, cdata_form) {
    var gnd_countSuggestions, gnd_searchterm, gnd_searchtype, that;
    that = this;
    gnd_searchterm = cdata_form.getFieldsByName("gndSearchBar")[0].getValue();
    gnd_searchtype = cdata_form.getFieldsByName("gndSelectType")[0].getValue();
    gnd_countSuggestions = cdata_form.getFieldsByName("gndSelectCountOfSuggestions")[0].getValue();
    if (gnd_searchterm.length === 0) {
      return;
    }
    if (gnd_xhr !== void 0) {
      gnd_xhr.abort();
    }
    gnd_xhr = new CUI.XHR({
      url: 'http://ws.gbv.de/suggest/gnd/?searchterm=' + gnd_searchterm + '&type=' + gnd_searchtype + '&count=' + gnd_countSuggestions
    });
    return gnd_xhr.start().done(function(data, status, statusText) {
      var fn, i, itemList, key, len, menu_items, ref, suggestion;
      CUI.debug('OK', gnd_xhr.getXHR(), gnd_xhr.getResponseHeaders());
      menu_items = [];
      ref = data[1];
      fn = function(key) {
        var item;
        item = {
          text: suggestion,
          value: data[3][key],
          tooltip: {
            markdown: true,
            auto_size: true,
            placement: "e",
            content: function(tooltip) {
              if (gnd_searchtype === "DifferentiatedPerson" || gnd_searchtype === "CorporateBody") {
                that.__getInfoFromEntityFacts(data[3][key], tooltip);
                return new Label({
                  icon: "spinner",
                  text: "lade Informationen"
                });
              }
            }
          }
        };
        return menu_items.push(item);
      };
      for (key = i = 0, len = ref.length; i < len; key = ++i) {
        suggestion = ref[key];
        fn(key);
      }
      itemList = {
        onClick: function(ev2, btn) {
          gndResultName = btn.getText();
          gndResultURI = btn.getOpt("value");
          cdata.gndResultURI = gndResultURI;
          cdata.gndResultName = gndResultName;
          cdata_form.getFieldsByName("gndResultName")[0].storeValue(gndResultName).displayValue();
          cdata_form.getFieldsByName("gndResultURI")[0].__checkbox.setText(gndResultURI);
          cdata_form.getFieldsByName("gndResultURI")[0].show();
          return cdata_form.getFieldsByName("gndSearchBar")[0].setValue('');
        },
        items: menu_items
      };
      if (itemList.items.length === 0) {
        itemList = {
          items: [
            {
              text: "kein Treffer",
              value: void 0
            }
          ]
        };
      }
      suggest_Menu.setItemList(itemList);
      return suggest_Menu.show(new Positioner({
        top: 60,
        left: 400,
        width: 0,
        height: 0
      }));
    });
  };

  CustomDataTypeGND.prototype.__resetGNDForm = function(cdata, cdata_form) {
    gndResultName = '';
    gndResultURI = '';
    cdata.gndResultName = '';
    cdata.gndResultURI = '';
    cdata_form.getFieldsByName("gndSelectType")[0].setValue("DifferentiatedPerson");
    cdata_form.getFieldsByName("gndSelectCountOfSuggestions")[0].setValue(20);
    cdata_form.getFieldsByName("gndSearchBar")[0].setValue("");
    cdata_form.getFieldsByName("gndResultName")[0].storeValue("").displayValue();
    cdata_form.getFieldsByName("gndResultURI")[0].__checkbox.setText("");
    return cdata_form.getFieldsByName("gndResultURI")[0].hide();
  };

  CustomDataTypeGND.prototype.__setEditorFieldStatus = function(cdata, element) {
    switch (this.getDataStatus(cdata)) {
      case "invalid":
        element.addClass("cui-input-invalid");
        break;
      default:
        element.removeClass("cui-input-invalid");
    }
    Events.trigger({
      node: element,
      type: "editor-changed"
    });
    return this;
  };

  CustomDataTypeGND.prototype.showEditPopover = function(btn, cdata) {
    var cdata_form, xpane;
    cdata.gndSelectCountOfSuggestions = 20;
    cdata_form = new Form({
      data: cdata,
      onDataChanged: (function(_this) {
        return function() {
          _this.__updateGNDResult(cdata);
          _this.__setEditorFieldStatus(cdata, _this.__layout);
          return _this.__updateSuggestionsMenu(cdata, cdata_form);
        };
      })(this),
      fields: this.__getEditorFields()
    }).start();
    xpane = new SimplePane({
      "class": "cui-demo-pane-pane",
      header_left: new Label({
        text: "Header left shortcut"
      }),
      content: new Label({
        text: "Center content shortcut"
      }),
      footer_right: new Label({
        text: "Footer right shortcut"
      })
    });
    return this.popover = new Popover({
      element: btn,
      fill_space: "both",
      placement: "c",
      pane: {
        header_left: new LocaLabel({
          loca_key: "custom.data.type.gnd.edit.modal.title"
        }),
        footer_left: new Button({
          text: "Ok, Popup schließen",
          onClick: (function(_this) {
            return function() {
              return _this.popover.destroy();
            };
          })(this)
        }),
        footer_right: new Button({
          text: "Zurücksetzen",
          onClick: (function(_this) {
            return function() {
              _this.__resetGNDForm(cdata, cdata_form);
              return _this.__updateGNDResult(cdata);
            };
          })(this)
        }),
        content: cdata_form
      }
    }).show();
  };

  CustomDataTypeGND.prototype.__getEditorFields = function() {
    return [
      {
        type: Select,
        undo_and_changed_support: false,
        form: {
          label: $$('custom.data.type.gnd.modal.form.text.type')
        },
        options: [
          {
            value: 'DifferentiatedPerson',
            text: 'Individualisierte Personen'
          }, {
            value: 'CorporateBody',
            text: 'Körperschaften'
          }, {
            value: 'PlaceOrGeographicName',
            text: 'Orte und Geographische Namen'
          }, {
            value: 'SubjectHeading',
            text: 'Schlagwörter'
          }
        ],
        name: 'gndSelectType'
      }, {
        type: Select,
        undo_and_changed_support: false,
        form: {
          label: $$('custom.data.type.gnd.modal.form.text.count')
        },
        options: [
          {
            value: 10,
            text: '10 Vorschläge'
          }, {
            value: 20,
            text: '20 Vorschläge'
          }, {
            value: 50,
            text: '50 Vorschläge'
          }, {
            value: 100,
            text: '100 Vorschläge'
          }
        ],
        name: 'gndSelectCountOfSuggestions'
      }, {
        type: Input,
        undo_and_changed_support: false,
        form: {
          label: $$("custom.data.type.gnd.modal.form.text.searchbar")
        },
        placeholder: $$("custom.data.type.gnd.modal.form.text.searchbar.placeholder"),
        name: "gndSearchBar"
      }, {
        form: {
          label: "Gewählter Eintrag"
        },
        type: Output,
        name: "gndResultName",
        data: {
          gndResultName: gndResultName
        }
      }, {
        form: {
          label: "Verknüpfte URI"
        },
        type: FormButton,
        name: "gndResultURI",
        icon: new Icon({
          "class": "fa-lightbulb-o"
        }),
        text: gndResultURI,
        onClick: (function(_this) {
          return function(evt, button) {
            return window.open(gndResultURI, "_blank");
          };
        })(this),
        onRender: (function(_this) {
          return function(_this) {
            if (gndResultURI === '') {
              return _this.hide();
            }
          };
        })(this)
      }
    ];
  };

  CustomDataTypeGND.prototype.renderDetailOutput = function(data, top_level_data, opts) {
    return this.__renderButtonByData(data[this.name()]);
  };

  CustomDataTypeGND.prototype.getDataStatus = function(cdata) {
    var nameCheck, uriCheck;
    uriCheck = CUI.parseLocation(cdata.gndResultURI);
    console.log(uriCheck);
    nameCheck = cdata.gndResultName ? cdata.gndResultName.trim() : void 0;
    if (uriCheck && nameCheck) {
      console.debug("getDataStatus: OK");
      return "ok";
    }
    if (cdata.gndResultURI.trim() === '' && cdata.gndResultName.trim() === '') {
      console.debug("getDataStatus: empty");
      return "empty";
    }
    console.debug("getDataStatus returns invalid");
    return "invalid";
  };

  CustomDataTypeGND.prototype.__renderButtonByData = function(cdata) {
    var tt_text;
    switch (this.getDataStatus(cdata)) {
      case "empty":
        return new EmptyLabel({
          text: $$("custom.data.type.gnd.edit.no_gnd")
        }).DOM;
      case "invalid":
        return new EmptyLabel({
          text: $$("custom.data.type.gnd.edit.no_valid_gnd")
        }).DOM;
    }
    gndResultURI = CUI.parseLocation(cdata.gndResultURI).url;
    tt_text = $$("custom.data.type.gnd.url.tooltip", {
      name: cdata.gndResultName
    });
    return new ButtonHref({
      appearance: "link",
      href: cdata.gndResultURI,
      target: "_blank",
      tooltip: {
        markdown: true,
        text: tt_text
      },
      text: cdata.gndResultName + ' (' + cdata.gndResultURI + ')'
    }).DOM;
  };

  CustomDataTypeGND.prototype.getSaveData = function(data, save_data, opts) {
    var cdata, ref;
    cdata = data[this.name()] || ((ref = data._template) != null ? ref[this.name()] : void 0);
    switch (this.getDataStatus(cdata)) {
      case "invalid":
        throw InvalidSaveDataException;
        break;
      case "empty":
        return save_data[this.name()] = null;
      case "ok":
        return save_data[this.name()] = {
          gndResultName: cdata.gndResultName.trim(),
          gndResultURI: cdata.gndResultURI.trim()
        };
    }
  };

  return CustomDataTypeGND;

})(CustomDataType);

CustomDataType.register(CustomDataTypeGND);
